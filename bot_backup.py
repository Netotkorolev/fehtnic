"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç "–§–µ—Ö—Ç–ù–∏–∫" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–≤ —Ñ–µ—Ö—Ç–æ–≤–∞–ª—å—â–∏–∫–æ–≤
–°–æ–∑–¥–∞–Ω–æ —Ñ–µ—Ö—Ç–æ–≤–∞–ª—å—â–∏–∫–∞–º–∏ –¥–ª—è —Ñ–µ—Ö—Ç–æ–≤–∞–ª—å—â–∏–∫–æ–≤ –æ—Ç –∫–∞–Ω–∞–ª–∞: "–ù–µ —Ç–æ—Ç –ö–æ—Ä–æ–ª—ë–≤"
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
)
from generator import NicknameGenerator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8449937753:AAESGwTQbd7t5az7GH9wprVw5i8uuq7Xlmc"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(INDIVIDUAL_WEAPON, INDIVIDUAL_GENDER, INDIVIDUAL_STYLE,
 TEAM_WEAPON, TEAM_GENDER, TEAM_STRENGTH) = range(6)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
generator = NicknameGenerator()

# –ë—Ä–µ–Ω–¥–∏–Ω–≥
BRAND_TEXT = '\n\n_–°–æ–∑–¥–∞–Ω–æ —Ñ–µ—Ö—Ç–æ–≤–∞–ª—å—â–∏–∫–∞–º–∏ –¥–ª—è —Ñ–µ—Ö—Ç–æ–≤–∞–ª—å—â–∏–∫–æ–≤ –æ—Ç –∫–∞–Ω–∞–ª–∞: "–ù–µ —Ç–æ—Ç –ö–æ—Ä–æ–ª—ë–≤"_'


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data='quick')],
        [InlineKeyboardButton("üéØ –¢–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data='individual')],
        [InlineKeyboardButton("üë• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã", callback_data='team')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = (
        "‚öîÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–µ—Ö—Ç–ù–∏–∫!* ‚öîÔ∏è\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –±–æ–µ–≤–æ–π –∫–ª–∏—á "
        "–¥–ª—è —Ñ–µ—Ö—Ç–æ–≤–∞–ª—å–Ω—ã—Ö –±–∞—Ç–∞–ª–∏–π!\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:"
    ) + BRAND_TEXT
    
    if update.message:
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.callback_query.message.edit_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )


async def quick_generation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
    query = update.callback_query
    await query.answer()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º
    result = generator.generate_quick()
    context.user_data['last_result'] = result
    context.user_data['mode'] = 'quick'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –±–æ–µ–≤–æ–π –∫–ª–∏—á)
    response_text = (
        f"‚öîÔ∏è *–¢–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º:* {result['nickname']}\n\n"
        f"üó£ *–ë–æ–µ–≤–æ–π –∫–ª–∏—á:* _{result['battle_cry']}_"
    ) + BRAND_TEXT
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data='regenerate')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url='https://t.me/netotkorolev')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        response_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def start_individual(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ç–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –≤—ã–±–æ—Ä –æ—Ä—É–∂–∏—è"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üó° –°–∞–±–ª—è", callback_data='weapon_—Å–∞–±–ª—è')],
        [InlineKeyboardButton("‚öîÔ∏è –®–ø–∞–≥–∞", callback_data='weapon_—à–ø–∞–≥–∞')],
        [InlineKeyboardButton("ü§∫ –†–∞–ø–∏—Ä–∞", callback_data='weapon_—Ä–∞–ø–∏—Ä–∞')],
        [InlineKeyboardButton("‚öîÔ∏è –î–ª–∏–Ω–Ω—ã–π –º–µ—á", callback_data='weapon_–¥–ª–∏–Ω–Ω—ã–π –º–µ—á')],
        [InlineKeyboardButton("üåü –°–≤–µ—Ç–æ–≤–æ–π –º–µ—á", callback_data='weapon_—Å–≤–µ—Ç–æ–≤–æ–π –º–µ—á')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "*–¢–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è*\n\n–ù–∞ –∫–∞–∫–æ–º –æ—Ä—É–∂–∏–∏ —Ç—ã —Ñ–µ—Ö—Ç—É–µ—à—å?" + BRAND_TEXT
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return INDIVIDUAL_WEAPON


async def individual_weapon(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ä—É–∂–∏—è"""
    query = update.callback_query
    await query.answer()
    
    weapon = query.data.replace('weapon_', '')
    context.user_data['weapon'] = weapon
    
    keyboard = [
        [InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data='gender_–º—É–∂—á–∏–Ω–∞')],
        [InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data='gender_–∂–µ–Ω—â–∏–Ω–∞')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='individual')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"*–¢–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è*\n\n–û—Ä—É–∂–∏–µ: {weapon}\n\n–¢—ã –º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞?" + BRAND_TEXT
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return INDIVIDUAL_GENDER


async def individual_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    gender = query.data.replace('gender_', '')
    context.user_data['gender'] = gender
    
    keyboard = [
        [InlineKeyboardButton("üí™ –°–∏–ª–∞", callback_data='style_—Å–∏–ª–∞')],
        [InlineKeyboardButton("ü¶ä –•–∏—Ç—Ä–æ—Å—Ç—å", callback_data='style_—Ö–∏—Ç—Ä–æ—Å—Ç—å')],
        [InlineKeyboardButton("üß† –¢–∞–∫—Ç–∏–∫–∞", callback_data='style_—Ç–∞–∫—Ç–∏–∫–∞')],
        [InlineKeyboardButton("üìö –û–ø—ã—Ç", callback_data='style_–æ–ø—ã—Ç')],
        [InlineKeyboardButton("üî• –≠–º–æ—Ü–∏–∏", callback_data='style_—ç–º–æ—Ü–∏–∏')],
        [InlineKeyboardButton("üôè –§–µ—Ö—Ç–æ–≤–∞–ª—å–Ω—ã–µ –±–æ–≥–∏", callback_data='style_—Å –ø–æ–º–æ—â—å—é —Ñ–µ—Ö—Ç–æ–≤–∞–ª—å–Ω—ã—Ö –±–æ–≥–æ–≤')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_weapon')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    weapon = context.user_data['weapon']
    text = (
        f"*–¢–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è*\n\n"
        f"–û—Ä—É–∂–∏–µ: {weapon}\n"
        f"–ü–æ–ª: {gender}\n\n"
        f"–ó–∞ —Å—á–µ—Ç —á–µ–≥–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ø–æ–±–µ–∂–¥–∞—Ç—å –Ω–∞ –¥–æ—Ä–æ–∂–∫–µ?"
    ) + BRAND_TEXT
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return INDIVIDUAL_STYLE


async def individual_style(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    style = query.data.replace('style_', '')
    weapon = context.user_data['weapon']
    gender = context.user_data['gender']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º
    result = generator.generate_individual(weapon, gender, style)
    context.user_data['last_result'] = result
    context.user_data['mode'] = 'individual'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response_text = (
        f"‚öîÔ∏è *–¢–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º:* {result['nickname']}\n\n"
        f"üó£ *–ë–æ–µ–≤–æ–π –∫–ª–∏—á:* _{result['battle_cry']}_\n\n"
        f"üèÜ –û—Ä—É–∂–∏–µ: {weapon}\n"
        f"üë§ –ü–æ–ª: {gender}\n"
        f"üí™ –°—Ç–∏–ª—å: {style}"
    ) + BRAND_TEXT
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data='regenerate')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url='https://t.me/netotkorolev')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        response_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ConversationHandler.END


async def start_team(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –∫–æ–º–∞–Ω–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –≤—ã–±–æ—Ä –æ—Ä—É–∂–∏—è"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üó° –°–∞–±–ª—è", callback_data='team_weapon_—Å–∞–±–ª—è')],
        [InlineKeyboardButton("‚öîÔ∏è –®–ø–∞–≥–∞", callback_data='team_weapon_—à–ø–∞–≥–∞')],
        [InlineKeyboardButton("ü§∫ –†–∞–ø–∏—Ä–∞", callback_data='team_weapon_—Ä–∞–ø–∏—Ä–∞')],
        [InlineKeyboardButton("‚öîÔ∏è –î–ª–∏–Ω–Ω—ã–π –º–µ—á", callback_data='team_weapon_–¥–ª–∏–Ω–Ω—ã–π –º–µ—á')],
        [InlineKeyboardButton("üåü –°–≤–µ—Ç–æ–≤–æ–π –º–µ—á", callback_data='team_weapon_—Å–≤–µ—Ç–æ–≤–æ–π –º–µ—á')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "*–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã*\n\n–ù–∞ –∫–∞–∫–æ–º –æ—Ä—É–∂–∏–∏ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞?" + BRAND_TEXT
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return TEAM_WEAPON


async def team_weapon(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ä—É–∂–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã"""
    query = update.callback_query
    await query.answer()
    
    weapon = query.data.replace('team_weapon_', '')
    context.user_data['team_weapon'] = weapon
    
    keyboard = [
        [InlineKeyboardButton("üë®‚Äçüë®‚Äçüë¶ –ú—É–∂—Å–∫–∞—è", callback_data='team_gender_–º—É–∂—Å–∫–∞—è')],
        [InlineKeyboardButton("üë©‚Äçüë©‚Äçüëß –ñ–µ–Ω—Å–∫–∞—è", callback_data='team_gender_–∂–µ–Ω—Å–∫–∞—è')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='team')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"*–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã*\n\n–û—Ä—É–∂–∏–µ: {weapon}\n\n–≠—Ç–æ –∂–µ–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –º—É–∂—Å–∫–∞—è?" + BRAND_TEXT
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return TEAM_GENDER


async def team_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –∫–æ–º–∞–Ω–¥—ã"""
    query = update.callback_query
    await query.answer()
    
    gender = query.data.replace('team_gender_', '')
    context.user_data['team_gender'] = gender
    
    keyboard = [
        [InlineKeyboardButton("üß† –¢–∞–∫—Ç–∏–∫–∞", callback_data='team_strength_—Ç–∞–∫—Ç–∏–∫–∞')],
        [InlineKeyboardButton("üì¢ –ì—Ä–æ–º–∫–∏–π –≥–æ–ª–æ—Å", callback_data='team_strength_–≥—Ä–æ–º–∫–∏–π –≥–æ–ª–æ—Å')],
        [InlineKeyboardButton("üí™ –°–∏–ª–∞", callback_data='team_strength_—Å–∏–ª–∞')],
        [InlineKeyboardButton("üìö –û–ø—ã—Ç", callback_data='team_strength_–æ–ø—ã—Ç')],
        [InlineKeyboardButton("üî• –ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", callback_data='team_strength_–Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_team_weapon')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    weapon = context.user_data['team_weapon']
    text = (
        f"*–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã*\n\n"
        f"–û—Ä—É–∂–∏–µ: {weapon}\n"
        f"–ö–æ–º–∞–Ω–¥–∞: {gender}\n\n"
        f"–ö–∞–∫–∏–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã?"
    ) + BRAND_TEXT
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return TEAM_STRENGTH


async def team_strength(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∏–ª—ã –∫–æ–º–∞–Ω–¥—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    strength = query.data.replace('team_strength_', '')
    weapon = context.user_data['team_weapon']
    gender = context.user_data['team_gender']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º
    result = generator.generate_team(weapon, gender, strength)
    context.user_data['last_result'] = result
    context.user_data['mode'] = 'team'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response_text = (
        f"‚öîÔ∏è *–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:* {result['nickname']}\n\n"
        f"üó£ *–ë–æ–µ–≤–æ–π –∫–ª–∏—á –∫–æ–º–∞–Ω–¥—ã:* _{result['battle_cry']}_\n\n"
        f"üèÜ –û—Ä—É–∂–∏–µ: {weapon}\n"
        f"üë• –ö–æ–º–∞–Ω–¥–∞: {gender}\n"
        f"üí™ –°–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: {strength}"
    ) + BRAND_TEXT
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data='regenerate')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url='https://t.me/netotkorolev')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        response_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    return ConversationHandler.END


async def regenerate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    mode = context.user_data.get('mode')
    
    if mode == 'quick':
        result = generator.generate_quick()
        response_text = (
            f"‚öîÔ∏è *–¢–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º:* {result['nickname']}\n\n"
            f"üó£ *–ë–æ–µ–≤–æ–π –∫–ª–∏—á:* _{result['battle_cry']}_"
        ) + BRAND_TEXT
    elif mode == 'individual':
        weapon = context.user_data['weapon']
        gender = context.user_data['gender']
        style = context.user_data['last_result']['style']
        result = generator.generate_individual(weapon, gender, style)
        response_text = (
            f"‚öîÔ∏è *–¢–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º:* {result['nickname']}\n\n"
            f"üó£ *–ë–æ–µ–≤–æ–π –∫–ª–∏—á:* _{result['battle_cry']}_\n\n"
            f"üèÜ –û—Ä—É–∂–∏–µ: {weapon}\n"
            f"üë§ –ü–æ–ª: {gender}\n"
            f"üí™ –°—Ç–∏–ª—å: {style}"
        ) + BRAND_TEXT
    elif mode == 'team':
        weapon = context.user_data['team_weapon']
        gender = context.user_data['team_gender']
        strength = context.user_data['last_result']['strength']
        result = generator.generate_team(weapon, gender, strength)
        response_text = (
            f"‚öîÔ∏è *–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:* {result['nickname']}\n\n"
            f"üó£ *–ë–æ–µ–≤–æ–π –∫–ª–∏—á –∫–æ–º–∞–Ω–¥—ã:* _{result['battle_cry']}_\n\n"
            f"üèÜ –û—Ä—É–∂–∏–µ: {weapon}\n"
            f"üë• –ö–æ–º–∞–Ω–¥–∞: {gender}\n"
            f"üí™ –°–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: {strength}"
        ) + BRAND_TEXT
    else:
        await start(update, context)
        return
    
    context.user_data['last_result'] = result
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data='regenerate')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url='https://t.me/netotkorolev')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        response_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def back_to_weapon(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –æ—Ä—É–∂–∏—è"""
    return await start_individual(update, context)


async def back_to_team_weapon(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –æ—Ä—É–∂–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã"""
    return await start_team(update, context)


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await start(update, context)
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await start(update, context)
    return ConversationHandler.END


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # ConversationHandler –¥–ª—è —Ç–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    individual_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_individual, pattern='^individual$')],
        states={
            INDIVIDUAL_WEAPON: [
                CallbackQueryHandler(individual_weapon, pattern='^weapon_'),
                CallbackQueryHandler(main_menu, pattern='^main_menu$'),
            ],
            INDIVIDUAL_GENDER: [
                CallbackQueryHandler(individual_gender, pattern='^gender_'),
                CallbackQueryHandler(start_individual, pattern='^individual$'),
            ],
            INDIVIDUAL_STYLE: [
                CallbackQueryHandler(individual_style, pattern='^style_'),
                CallbackQueryHandler(back_to_weapon, pattern='^back_to_weapon$'),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(main_menu, pattern='^main_menu$'),
            CallbackQueryHandler(cancel, pattern='^cancel$'),
        ],
    )
    
    # ConversationHandler –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    team_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_team, pattern='^team$')],
        states={
            TEAM_WEAPON: [
                CallbackQueryHandler(team_weapon, pattern='^team_weapon_'),
                CallbackQueryHandler(main_menu, pattern='^main_menu$'),
            ],
            TEAM_GENDER: [
                CallbackQueryHandler(team_gender, pattern='^team_gender_'),
                CallbackQueryHandler(start_team, pattern='^team$'),
            ],
            TEAM_STRENGTH: [
                CallbackQueryHandler(team_strength, pattern='^team_strength_'),
                CallbackQueryHandler(back_to_team_weapon, pattern='^back_to_team_weapon$'),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(main_menu, pattern='^main_menu$'),
            CallbackQueryHandler(cancel, pattern='^cancel$'),
        ],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(quick_generation, pattern='^quick$'))
    application.add_handler(CallbackQueryHandler(regenerate, pattern='^regenerate$'))
    application.add_handler(CallbackQueryHandler(main_menu, pattern='^main_menu$'))
    application.add_handler(individual_conv_handler)
    application.add_handler(team_conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()

